#[cfg(target_endian = "little")]
#[cfg(test)]
macro_rules! encode_literal {
    ($v:expr => 0) => (($v & 0x00ff) as u8);
    ($v:expr => 1) => ((($v & 0xff00) >> 8) as u8);
}

#[cfg(test)]
macro_rules! inst {
    (ADC A, A)            => ([0x8f]);
    (ADC A, B)            => ([0x88]);
    (ADC A, C)            => ([0x89]);
    (ADC A, D)            => ([0x8a]);
    (ADC A, E)            => ([0x8b]);
    (ADC A, H)            => ([0x8c]);
    (ADC A, L)            => ([0x8d]);
    (ADC A, (*HL))        => ([0x8e]);
    (ADC A, $x:expr)      => ([0xce, $x]);
    (ADD A, A)            => ([0x87]);
    (ADD A, B)            => ([0x80]);
    (ADD A, C)            => ([0x81]);
    (ADD A, D)            => ([0x82]);
    (ADD A, E)            => ([0x83]);
    (ADD A, H)            => ([0x84]);
    (ADD A, L)            => ([0x85]);
    (ADD A, (*HL))        => ([0x86]);
    (ADD A, $x:expr)      => ([0xc6, $x]);
    (ADD HL, BC)          => ([0x09]);
    (ADD HL, HL)          => ([0x29]);
    (ADD HL, DE)          => ([0x19]);
    (ADD HL, SP)          => ([0x39]);
    (AND B)               => ([0xa0]);
    (AND C)               => ([0xa1]);
    (AND D)               => ([0xa2]);
    (AND E)               => ([0xa3]);
    (AND H)               => ([0xa4]);
    (AND L)               => ([0xa5]);
    (AND (*HL))           => ([0xa6]);
    (AND A)               => ([0xa7]);
    (AND $x:expr)         => ([0xe6, $x]);
    (CALL $x:expr)        => ([0xcd, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL C, $x:expr)     => ([0xdc, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL NC, $x:expr)    => ([0xd4, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL NZ, $x:expr)    => ([0xc4, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL M, $x:expr)     => ([0xfc, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL P, $x:expr)     => ([0xf4, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL PE, $x:expr)    => ([0xec, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL PO, $x:expr)    => ([0xe4, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CALL Z, $x:expr)     => ([0xcc, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (CCF)                 => ([0x3f]);
    (CP B)                => ([0xb8]);
    (CP C)                => ([0xb9]);
    (CP D)                => ([0xba]);
    (CP E)                => ([0xbb]);
    (CP H)                => ([0xbc]);
    (CP L)                => ([0xbd]);
    (CP (*HL))            => ([0xbe]);
    (CP A)                => ([0xbf]);
    (CP $x:expr)          => ([0xfe, $x]);
    (CPL)                 => ([0x2f]);
    (DAA)                 => ([0x27]);
    (DEC A)               => ([0x3d]);
    (DEC B)               => ([0x05]);
    (DEC C)               => ([0x0d]);
    (DEC D)               => ([0x15]);
    (DEC E)               => ([0x1d]);
    (DEC H)               => ([0x25]);
    (DEC L)               => ([0x2d]);
    (DEC BC)              => ([0x0b]);
    (DEC DE)              => ([0x1b]);
    (DEC HL)              => ([0x2b]);
    (DEC SP)              => ([0x3b]);
    (DEC (*HL))           => ([0x35]);
    (DJNZ $x:expr)        => ([0x10, $x]);
    (EX AF, AF_)          => ([0x08]);
    (EXX)                 => ([0xd9]);
    (HALT)                => ([0x76]);
    (INC A)               => ([0x3c]);
    (INC B)               => ([0x04]);
    (INC C)               => ([0x0c]);
    (INC D)               => ([0x14]);
    (INC E)               => ([0x1c]);
    (INC H)               => ([0x24]);
    (INC L)               => ([0x2c]);
    (INC BC)              => ([0x03]);
    (INC DE)              => ([0x13]);
    (INC HL)              => ([0x23]);
    (INC SP)              => ([0x33]);
    (INC (*HL))           => ([0x34]);
    (JP $x:expr)          => ([0xc3, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP C, $x:expr)       => ([0xda, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP NC, $x:expr)      => ([0xd2, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP NZ, $x:expr)      => ([0xc2, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP M, $x:expr)       => ([0xfa, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP P, $x:expr)       => ([0xf2, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP PE, $x:expr)      => ([0xea, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP PO, $x:expr)      => ([0xe2, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JP Z, $x:expr)       => ([0xca, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (JR $x:expr)          => ([0x18, $x]);
    (JR C, $x:expr)       => ([0x38, $x]);
    (JR NC, $x:expr)      => ([0x30, $x]);
    (JR NZ, $x:expr)      => ([0x20, $x]);
    (JR Z, $x:expr)       => ([0x28, $x]);
    (LD A, (*BC))         => ([0x0a]);
    (LD A, (*DE))         => ([0x1a]);
    (LD A, A)             => ([0x7f]);
    (LD A, B)             => ([0x78]);
    (LD A, C)             => ([0x79]);
    (LD A, D)             => ([0x7a]);
    (LD A, E)             => ([0x7b]);
    (LD A, H)             => ([0x7c]);
    (LD A, L)             => ([0x7d]);
    (LD A, (*HL))         => ([0x7e]);
    (LD A, (*$x:expr))    => ([0x3a, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD A, $x:expr)       => ([0x3e, $x]);
    (LD B, A)             => ([0x47]);
    (LD B, B)             => ([0x40]);
    (LD B, C)             => ([0x41]);
    (LD B, D)             => ([0x42]);
    (LD B, E)             => ([0x43]);
    (LD B, H)             => ([0x44]);
    (LD B, L)             => ([0x45]);
    (LD B, (*HL))         => ([0x46]);
    (LD B, $x:expr)       => ([0x06, $x]);
    (LD C, A)             => ([0x4f]);
    (LD C, B)             => ([0x48]);
    (LD C, C)             => ([0x49]);
    (LD C, D)             => ([0x4a]);
    (LD C, E)             => ([0x4b]);
    (LD C, H)             => ([0x4c]);
    (LD C, L)             => ([0x4d]);
    (LD C, (*HL))         => ([0x4e]);
    (LD D, A)             => ([0x57]);
    (LD D, B)             => ([0x50]);
    (LD D, C)             => ([0x51]);
    (LD D, D)             => ([0x52]);
    (LD D, E)             => ([0x53]);
    (LD D, H)             => ([0x54]);
    (LD D, L)             => ([0x55]);
    (LD D, (*HL))         => ([0x56]);
    (LD E, A)             => ([0x5f]);
    (LD E, B)             => ([0x58]);
    (LD E, C)             => ([0x59]);
    (LD E, D)             => ([0x5a]);
    (LD E, E)             => ([0x5b]);
    (LD E, H)             => ([0x5c]);
    (LD E, L)             => ([0x5d]);
    (LD E, (*HL))         => ([0x5e]);
    (LD C, $x:expr)       => ([0x0e, $x]);
    (LD D, $x:expr)       => ([0x16, $x]);
    (LD E, $x:expr)       => ([0x1e, $x]);
    (LD H, A)             => ([0x67]);
    (LD H, B)             => ([0x60]);
    (LD H, C)             => ([0x61]);
    (LD H, D)             => ([0x62]);
    (LD H, E)             => ([0x63]);
    (LD H, H)             => ([0x64]);
    (LD H, L)             => ([0x65]);
    (LD H, (*HL))         => ([0x66]);
    (LD H, $x:expr)       => ([0x26, $x]);
    (LD L, A)             => ([0x6f]);
    (LD L, B)             => ([0x68]);
    (LD L, C)             => ([0x69]);
    (LD L, D)             => ([0x6a]);
    (LD L, E)             => ([0x6b]);
    (LD L, H)             => ([0x6c]);
    (LD L, L)             => ([0x6d]);
    (LD L, (*HL))         => ([0x6e]);
    (LD L, $x:expr)       => ([0x2e, $x]);
    (LD BC, $x:expr)      => ([0x01, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD DE, $x:expr)      => ([0x11, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD HL, (*$x:expr))   => ([0x2a, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD HL, $x:expr)      => ([0x21, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD SP, $x:expr)      => ([0x31, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD (*BC), A)         => ([0x02]);
    (LD (*DE), A)         => ([0x12]);
    (LD (*HL), A)         => ([0x77]);
    (LD (*HL), B)         => ([0x70]);
    (LD (*HL), C)         => ([0x71]);
    (LD (*HL), D)         => ([0x72]);
    (LD (*HL), E)         => ([0x73]);
    (LD (*HL), H)         => ([0x74]);
    (LD (*HL), L)         => ([0x75]);
    (LD (*HL), $x:expr)   => ([0x36, $x]);
    (LD (*$x:expr), A)    => ([0x32, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (LD (**$x:expr), HL)  => ([0x22, encode_literal!($x => 0), encode_literal!($x => 1)]);
    (NOP)                 => ([0x00]);
    (OR B)                => ([0xb0]);
    (OR C)                => ([0xb1]);
    (OR D)                => ([0xb2]);
    (OR E)                => ([0xb3]);
    (OR H)                => ([0xb4]);
    (OR L)                => ([0xb5]);
    (OR (*HL))            => ([0xb6]);
    (OR A)                => ([0xb7]);
    (OR $x:expr)          => ([0xf6, $x]);
    (POP BC)              => ([0xc1]);
    (POP DE)              => ([0xd1]);
    (POP HL)              => ([0xe1]);
    (POP AF)              => ([0xf1]);
    (PUSH BC)             => ([0xc5]);
    (PUSH DE)             => ([0xd5]);
    (PUSH HL)             => ([0xe5]);
    (PUSH AF)             => ([0xf5]);
    (RET)                 => ([0xc9]);
    (RET C)               => ([0xd8]);
    (RET NC)              => ([0xd0]);
    (RET NZ)              => ([0xc0]);
    (RET M)               => ([0xf8]);
    (RET P)               => ([0xf0]);
    (RET PE)              => ([0xe8]);
    (RET PO)              => ([0xe0]);
    (RET Z)               => ([0xc8]);
    (RLA)                 => ([0x17]);
    (RLCA)                => ([0x07]);
    (RRA)                 => ([0x1f]);
    (RRCA)                => ([0x0f]);
    (RST 0x00)            => ([0xc7]);
    (RST 0x08)            => ([0xcf]);
    (RST 0x10)            => ([0xd7]);
    (RST 0x18)            => ([0xdf]);
    (RST 0x20)            => ([0xe7]);
    (RST 0x28)            => ([0xef]);
    (RST 0x30)            => ([0xf7]);
    (RST 0x38)            => ([0xff]);
    (SCF)                 => ([0x37]);
    (SBC A, B)            => ([0x98]);
    (SBC A, C)            => ([0x99]);
    (SBC A, D)            => ([0x9a]);
    (SBC A, E)            => ([0x9b]);
    (SBC A, H)            => ([0x9c]);
    (SBC A, L)            => ([0x9d]);
    (SBC A, (*HL))        => ([0x9e]);
    (SBC A, A)            => ([0x9f]);
    (SBC A, $x:expr)      => ([0xde, $x]);
    (SUB B)               => ([0x90]);
    (SUB C)               => ([0x91]);
    (SUB D)               => ([0x92]);
    (SUB E)               => ([0x93]);
    (SUB H)               => ([0x94]);
    (SUB L)               => ([0x95]);
    (SUB (*HL))           => ([0x96]);
    (SUB A)               => ([0x97]);
    (SUB $x:expr)         => ([0xd6, $x]);
    (XOR B)               => ([0xa8]);
    (XOR C)               => ([0xa9]);
    (XOR D)               => ([0xaa]);
    (XOR E)               => ([0xab]);
    (XOR H)               => ([0xac]);
    (XOR L)               => ([0xad]);
    (XOR (*HL))           => ([0xae]);
    (XOR A)               => ([0xaf]);
    (XOR $x:expr)         => ([0xee, $x]);
}
